// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xtlm_ipc_aximm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xtlm_5fipc_5faximm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xtlm_5fipc_5faximm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xtlm_5fipc_5faximm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xtlm_5fipc_5faximm_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xtlm_5fipc_5faximm_2eproto;
namespace xtlm_ipc {
class aximm_packet;
struct aximm_packetDefaultTypeInternal;
extern aximm_packetDefaultTypeInternal _aximm_packet_default_instance_;
}  // namespace xtlm_ipc
PROTOBUF_NAMESPACE_OPEN
template<> ::xtlm_ipc::aximm_packet* Arena::CreateMaybeMessage<::xtlm_ipc::aximm_packet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xtlm_ipc {

enum aximm_packet_burst_type : int {
  aximm_packet_burst_type_FIXED = 0,
  aximm_packet_burst_type_INCR = 1,
  aximm_packet_burst_type_WRAP = 2
};
bool aximm_packet_burst_type_IsValid(int value);
constexpr aximm_packet_burst_type aximm_packet_burst_type_burst_type_MIN = aximm_packet_burst_type_FIXED;
constexpr aximm_packet_burst_type aximm_packet_burst_type_burst_type_MAX = aximm_packet_burst_type_WRAP;
constexpr int aximm_packet_burst_type_burst_type_ARRAYSIZE = aximm_packet_burst_type_burst_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* aximm_packet_burst_type_descriptor();
template<typename T>
inline const std::string& aximm_packet_burst_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, aximm_packet_burst_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function aximm_packet_burst_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    aximm_packet_burst_type_descriptor(), enum_t_value);
}
inline bool aximm_packet_burst_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, aximm_packet_burst_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<aximm_packet_burst_type>(
    aximm_packet_burst_type_descriptor(), name, value);
}
enum aximm_packet_command : int {
  aximm_packet_command_READ = 0,
  aximm_packet_command_WRITE = 1
};
bool aximm_packet_command_IsValid(int value);
constexpr aximm_packet_command aximm_packet_command_command_MIN = aximm_packet_command_READ;
constexpr aximm_packet_command aximm_packet_command_command_MAX = aximm_packet_command_WRITE;
constexpr int aximm_packet_command_command_ARRAYSIZE = aximm_packet_command_command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* aximm_packet_command_descriptor();
template<typename T>
inline const std::string& aximm_packet_command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, aximm_packet_command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function aximm_packet_command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    aximm_packet_command_descriptor(), enum_t_value);
}
inline bool aximm_packet_command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, aximm_packet_command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<aximm_packet_command>(
    aximm_packet_command_descriptor(), name, value);
}
// ===================================================================

class aximm_packet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xtlm_ipc.aximm_packet) */ {
 public:
  inline aximm_packet() : aximm_packet(nullptr) {}
  ~aximm_packet() override;
  explicit PROTOBUF_CONSTEXPR aximm_packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  aximm_packet(const aximm_packet& from);
  aximm_packet(aximm_packet&& from) noexcept
    : aximm_packet() {
    *this = ::std::move(from);
  }

  inline aximm_packet& operator=(const aximm_packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline aximm_packet& operator=(aximm_packet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const aximm_packet& default_instance() {
    return *internal_default_instance();
  }
  static inline const aximm_packet* internal_default_instance() {
    return reinterpret_cast<const aximm_packet*>(
               &_aximm_packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(aximm_packet& a, aximm_packet& b) {
    a.Swap(&b);
  }
  inline void Swap(aximm_packet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(aximm_packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  aximm_packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<aximm_packet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const aximm_packet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const aximm_packet& from) {
    aximm_packet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(aximm_packet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xtlm_ipc.aximm_packet";
  }
  protected:
  explicit aximm_packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef aximm_packet_burst_type burst_type;
  static constexpr burst_type FIXED =
    aximm_packet_burst_type_FIXED;
  static constexpr burst_type INCR =
    aximm_packet_burst_type_INCR;
  static constexpr burst_type WRAP =
    aximm_packet_burst_type_WRAP;
  static inline bool burst_type_IsValid(int value) {
    return aximm_packet_burst_type_IsValid(value);
  }
  static constexpr burst_type burst_type_MIN =
    aximm_packet_burst_type_burst_type_MIN;
  static constexpr burst_type burst_type_MAX =
    aximm_packet_burst_type_burst_type_MAX;
  static constexpr int burst_type_ARRAYSIZE =
    aximm_packet_burst_type_burst_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  burst_type_descriptor() {
    return aximm_packet_burst_type_descriptor();
  }
  template<typename T>
  static inline const std::string& burst_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, burst_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function burst_type_Name.");
    return aximm_packet_burst_type_Name(enum_t_value);
  }
  static inline bool burst_type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      burst_type* value) {
    return aximm_packet_burst_type_Parse(name, value);
  }

  typedef aximm_packet_command command;
  static constexpr command READ =
    aximm_packet_command_READ;
  static constexpr command WRITE =
    aximm_packet_command_WRITE;
  static inline bool command_IsValid(int value) {
    return aximm_packet_command_IsValid(value);
  }
  static constexpr command command_MIN =
    aximm_packet_command_command_MIN;
  static constexpr command command_MAX =
    aximm_packet_command_command_MAX;
  static constexpr int command_ARRAYSIZE =
    aximm_packet_command_command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  command_descriptor() {
    return aximm_packet_command_descriptor();
  }
  template<typename T>
  static inline const std::string& command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function command_Name.");
    return aximm_packet_command_Name(enum_t_value);
  }
  static inline bool command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      command* value) {
    return aximm_packet_command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 6,
    kStrbFieldNumber = 7,
    kAddrFieldNumber = 2,
    kCmdFieldNumber = 1,
    kLenFieldNumber = 3,
    kSizeFieldNumber = 4,
    kRespFieldNumber = 8,
    kIdFieldNumber = 9,
    kLockFieldNumber = 10,
    kCacheFieldNumber = 11,
    kProtFieldNumber = 12,
    kDelayFieldNumber = 13,
    kQosFieldNumber = 16,
    kRegionFieldNumber = 17,
    kBurstFieldNumber = 5,
  };
  // optional bytes data = 6;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional bytes strb = 7;
  bool has_strb() const;
  private:
  bool _internal_has_strb() const;
  public:
  void clear_strb();
  const std::string& strb() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strb(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strb();
  PROTOBUF_NODISCARD std::string* release_strb();
  void set_allocated_strb(std::string* strb);
  private:
  const std::string& _internal_strb() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strb(const std::string& value);
  std::string* _internal_mutable_strb();
  public:

  // required uint64 addr = 2;
  bool has_addr() const;
  private:
  bool _internal_has_addr() const;
  public:
  void clear_addr();
  uint64_t addr() const;
  void set_addr(uint64_t value);
  private:
  uint64_t _internal_addr() const;
  void _internal_set_addr(uint64_t value);
  public:

  // required .xtlm_ipc.aximm_packet.command cmd = 1;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  ::xtlm_ipc::aximm_packet_command cmd() const;
  void set_cmd(::xtlm_ipc::aximm_packet_command value);
  private:
  ::xtlm_ipc::aximm_packet_command _internal_cmd() const;
  void _internal_set_cmd(::xtlm_ipc::aximm_packet_command value);
  public:

  // optional uint32 len = 3;
  bool has_len() const;
  private:
  bool _internal_has_len() const;
  public:
  void clear_len();
  uint32_t len() const;
  void set_len(uint32_t value);
  private:
  uint32_t _internal_len() const;
  void _internal_set_len(uint32_t value);
  public:

  // optional uint32 size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // optional int32 resp = 8;
  bool has_resp() const;
  private:
  bool _internal_has_resp() const;
  public:
  void clear_resp();
  int32_t resp() const;
  void set_resp(int32_t value);
  private:
  int32_t _internal_resp() const;
  void _internal_set_resp(int32_t value);
  public:

  // optional uint32 id = 9;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional uint32 lock = 10;
  bool has_lock() const;
  private:
  bool _internal_has_lock() const;
  public:
  void clear_lock();
  uint32_t lock() const;
  void set_lock(uint32_t value);
  private:
  uint32_t _internal_lock() const;
  void _internal_set_lock(uint32_t value);
  public:

  // optional uint32 cache = 11;
  bool has_cache() const;
  private:
  bool _internal_has_cache() const;
  public:
  void clear_cache();
  uint32_t cache() const;
  void set_cache(uint32_t value);
  private:
  uint32_t _internal_cache() const;
  void _internal_set_cache(uint32_t value);
  public:

  // optional uint32 prot = 12;
  bool has_prot() const;
  private:
  bool _internal_has_prot() const;
  public:
  void clear_prot();
  uint32_t prot() const;
  void set_prot(uint32_t value);
  private:
  uint32_t _internal_prot() const;
  void _internal_set_prot(uint32_t value);
  public:

  // optional float delay = 13;
  bool has_delay() const;
  private:
  bool _internal_has_delay() const;
  public:
  void clear_delay();
  float delay() const;
  void set_delay(float value);
  private:
  float _internal_delay() const;
  void _internal_set_delay(float value);
  public:

  // optional uint32 qos = 16;
  bool has_qos() const;
  private:
  bool _internal_has_qos() const;
  public:
  void clear_qos();
  uint32_t qos() const;
  void set_qos(uint32_t value);
  private:
  uint32_t _internal_qos() const;
  void _internal_set_qos(uint32_t value);
  public:

  // optional uint32 region = 17;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  uint32_t region() const;
  void set_region(uint32_t value);
  private:
  uint32_t _internal_region() const;
  void _internal_set_region(uint32_t value);
  public:

  // optional .xtlm_ipc.aximm_packet.burst_type burst = 5 [default = INCR];
  bool has_burst() const;
  private:
  bool _internal_has_burst() const;
  public:
  void clear_burst();
  ::xtlm_ipc::aximm_packet_burst_type burst() const;
  void set_burst(::xtlm_ipc::aximm_packet_burst_type value);
  private:
  ::xtlm_ipc::aximm_packet_burst_type _internal_burst() const;
  void _internal_set_burst(::xtlm_ipc::aximm_packet_burst_type value);
  public:

  // @@protoc_insertion_point(class_scope:xtlm_ipc.aximm_packet)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strb_;
    uint64_t addr_;
    int cmd_;
    uint32_t len_;
    uint32_t size_;
    int32_t resp_;
    uint32_t id_;
    uint32_t lock_;
    uint32_t cache_;
    uint32_t prot_;
    float delay_;
    uint32_t qos_;
    uint32_t region_;
    int burst_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xtlm_5fipc_5faximm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// aximm_packet

// required .xtlm_ipc.aximm_packet.command cmd = 1;
inline bool aximm_packet::_internal_has_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool aximm_packet::has_cmd() const {
  return _internal_has_cmd();
}
inline void aximm_packet::clear_cmd() {
  _impl_.cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::xtlm_ipc::aximm_packet_command aximm_packet::_internal_cmd() const {
  return static_cast< ::xtlm_ipc::aximm_packet_command >(_impl_.cmd_);
}
inline ::xtlm_ipc::aximm_packet_command aximm_packet::cmd() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.cmd)
  return _internal_cmd();
}
inline void aximm_packet::_internal_set_cmd(::xtlm_ipc::aximm_packet_command value) {
  assert(::xtlm_ipc::aximm_packet_command_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cmd_ = value;
}
inline void aximm_packet::set_cmd(::xtlm_ipc::aximm_packet_command value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.cmd)
}

// required uint64 addr = 2;
inline bool aximm_packet::_internal_has_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool aximm_packet::has_addr() const {
  return _internal_has_addr();
}
inline void aximm_packet::clear_addr() {
  _impl_.addr_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t aximm_packet::_internal_addr() const {
  return _impl_.addr_;
}
inline uint64_t aximm_packet::addr() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.addr)
  return _internal_addr();
}
inline void aximm_packet::_internal_set_addr(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.addr_ = value;
}
inline void aximm_packet::set_addr(uint64_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.addr)
}

// optional uint32 len = 3;
inline bool aximm_packet::_internal_has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool aximm_packet::has_len() const {
  return _internal_has_len();
}
inline void aximm_packet::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t aximm_packet::_internal_len() const {
  return _impl_.len_;
}
inline uint32_t aximm_packet::len() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.len)
  return _internal_len();
}
inline void aximm_packet::_internal_set_len(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.len_ = value;
}
inline void aximm_packet::set_len(uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.len)
}

// optional uint32 size = 4;
inline bool aximm_packet::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool aximm_packet::has_size() const {
  return _internal_has_size();
}
inline void aximm_packet::clear_size() {
  _impl_.size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t aximm_packet::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t aximm_packet::size() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.size)
  return _internal_size();
}
inline void aximm_packet::_internal_set_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.size_ = value;
}
inline void aximm_packet::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.size)
}

// optional .xtlm_ipc.aximm_packet.burst_type burst = 5 [default = INCR];
inline bool aximm_packet::_internal_has_burst() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool aximm_packet::has_burst() const {
  return _internal_has_burst();
}
inline void aximm_packet::clear_burst() {
  _impl_.burst_ = 1;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::xtlm_ipc::aximm_packet_burst_type aximm_packet::_internal_burst() const {
  return static_cast< ::xtlm_ipc::aximm_packet_burst_type >(_impl_.burst_);
}
inline ::xtlm_ipc::aximm_packet_burst_type aximm_packet::burst() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.burst)
  return _internal_burst();
}
inline void aximm_packet::_internal_set_burst(::xtlm_ipc::aximm_packet_burst_type value) {
  assert(::xtlm_ipc::aximm_packet_burst_type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.burst_ = value;
}
inline void aximm_packet::set_burst(::xtlm_ipc::aximm_packet_burst_type value) {
  _internal_set_burst(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.burst)
}

// optional bytes data = 6;
inline bool aximm_packet::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool aximm_packet::has_data() const {
  return _internal_has_data();
}
inline void aximm_packet::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& aximm_packet::data() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void aximm_packet::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.data)
}
inline std::string* aximm_packet::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:xtlm_ipc.aximm_packet.data)
  return _s;
}
inline const std::string& aximm_packet::_internal_data() const {
  return _impl_.data_.Get();
}
inline void aximm_packet::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* aximm_packet::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* aximm_packet::release_data() {
  // @@protoc_insertion_point(field_release:xtlm_ipc.aximm_packet.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void aximm_packet::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xtlm_ipc.aximm_packet.data)
}

// optional bytes strb = 7;
inline bool aximm_packet::_internal_has_strb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool aximm_packet::has_strb() const {
  return _internal_has_strb();
}
inline void aximm_packet::clear_strb() {
  _impl_.strb_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& aximm_packet::strb() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.strb)
  return _internal_strb();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void aximm_packet::set_strb(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.strb_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.strb)
}
inline std::string* aximm_packet::mutable_strb() {
  std::string* _s = _internal_mutable_strb();
  // @@protoc_insertion_point(field_mutable:xtlm_ipc.aximm_packet.strb)
  return _s;
}
inline const std::string& aximm_packet::_internal_strb() const {
  return _impl_.strb_.Get();
}
inline void aximm_packet::_internal_set_strb(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.strb_.Set(value, GetArenaForAllocation());
}
inline std::string* aximm_packet::_internal_mutable_strb() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.strb_.Mutable(GetArenaForAllocation());
}
inline std::string* aximm_packet::release_strb() {
  // @@protoc_insertion_point(field_release:xtlm_ipc.aximm_packet.strb)
  if (!_internal_has_strb()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.strb_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.strb_.IsDefault()) {
    _impl_.strb_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void aximm_packet::set_allocated_strb(std::string* strb) {
  if (strb != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.strb_.SetAllocated(strb, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.strb_.IsDefault()) {
    _impl_.strb_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xtlm_ipc.aximm_packet.strb)
}

// optional int32 resp = 8;
inline bool aximm_packet::_internal_has_resp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool aximm_packet::has_resp() const {
  return _internal_has_resp();
}
inline void aximm_packet::clear_resp() {
  _impl_.resp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t aximm_packet::_internal_resp() const {
  return _impl_.resp_;
}
inline int32_t aximm_packet::resp() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.resp)
  return _internal_resp();
}
inline void aximm_packet::_internal_set_resp(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.resp_ = value;
}
inline void aximm_packet::set_resp(int32_t value) {
  _internal_set_resp(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.resp)
}

// optional uint32 id = 9;
inline bool aximm_packet::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool aximm_packet::has_id() const {
  return _internal_has_id();
}
inline void aximm_packet::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t aximm_packet::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t aximm_packet::id() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.id)
  return _internal_id();
}
inline void aximm_packet::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.id_ = value;
}
inline void aximm_packet::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.id)
}

// optional uint32 lock = 10;
inline bool aximm_packet::_internal_has_lock() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool aximm_packet::has_lock() const {
  return _internal_has_lock();
}
inline void aximm_packet::clear_lock() {
  _impl_.lock_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t aximm_packet::_internal_lock() const {
  return _impl_.lock_;
}
inline uint32_t aximm_packet::lock() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.lock)
  return _internal_lock();
}
inline void aximm_packet::_internal_set_lock(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.lock_ = value;
}
inline void aximm_packet::set_lock(uint32_t value) {
  _internal_set_lock(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.lock)
}

// optional uint32 cache = 11;
inline bool aximm_packet::_internal_has_cache() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool aximm_packet::has_cache() const {
  return _internal_has_cache();
}
inline void aximm_packet::clear_cache() {
  _impl_.cache_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t aximm_packet::_internal_cache() const {
  return _impl_.cache_;
}
inline uint32_t aximm_packet::cache() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.cache)
  return _internal_cache();
}
inline void aximm_packet::_internal_set_cache(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.cache_ = value;
}
inline void aximm_packet::set_cache(uint32_t value) {
  _internal_set_cache(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.cache)
}

// optional uint32 prot = 12;
inline bool aximm_packet::_internal_has_prot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool aximm_packet::has_prot() const {
  return _internal_has_prot();
}
inline void aximm_packet::clear_prot() {
  _impl_.prot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t aximm_packet::_internal_prot() const {
  return _impl_.prot_;
}
inline uint32_t aximm_packet::prot() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.prot)
  return _internal_prot();
}
inline void aximm_packet::_internal_set_prot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.prot_ = value;
}
inline void aximm_packet::set_prot(uint32_t value) {
  _internal_set_prot(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.prot)
}

// optional float delay = 13;
inline bool aximm_packet::_internal_has_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool aximm_packet::has_delay() const {
  return _internal_has_delay();
}
inline void aximm_packet::clear_delay() {
  _impl_.delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float aximm_packet::_internal_delay() const {
  return _impl_.delay_;
}
inline float aximm_packet::delay() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.delay)
  return _internal_delay();
}
inline void aximm_packet::_internal_set_delay(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.delay_ = value;
}
inline void aximm_packet::set_delay(float value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.delay)
}

// optional uint32 qos = 16;
inline bool aximm_packet::_internal_has_qos() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool aximm_packet::has_qos() const {
  return _internal_has_qos();
}
inline void aximm_packet::clear_qos() {
  _impl_.qos_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t aximm_packet::_internal_qos() const {
  return _impl_.qos_;
}
inline uint32_t aximm_packet::qos() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.qos)
  return _internal_qos();
}
inline void aximm_packet::_internal_set_qos(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.qos_ = value;
}
inline void aximm_packet::set_qos(uint32_t value) {
  _internal_set_qos(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.qos)
}

// optional uint32 region = 17;
inline bool aximm_packet::_internal_has_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool aximm_packet::has_region() const {
  return _internal_has_region();
}
inline void aximm_packet::clear_region() {
  _impl_.region_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t aximm_packet::_internal_region() const {
  return _impl_.region_;
}
inline uint32_t aximm_packet::region() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.region)
  return _internal_region();
}
inline void aximm_packet::_internal_set_region(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.region_ = value;
}
inline void aximm_packet::set_region(uint32_t value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.region)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xtlm_ipc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xtlm_ipc::aximm_packet_burst_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xtlm_ipc::aximm_packet_burst_type>() {
  return ::xtlm_ipc::aximm_packet_burst_type_descriptor();
}
template <> struct is_proto_enum< ::xtlm_ipc::aximm_packet_command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xtlm_ipc::aximm_packet_command>() {
  return ::xtlm_ipc::aximm_packet_command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xtlm_5fipc_5faximm_2eproto
