// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xtlm_ipc_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xtlm_5fipc_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xtlm_5fipc_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xtlm_5fipc_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xtlm_5fipc_5fcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xtlm_5fipc_5fcommon_2eproto;
namespace xtlm_ipc {
class control_register;
struct control_registerDefaultTypeInternal;
extern control_registerDefaultTypeInternal _control_register_default_instance_;
class header;
struct headerDefaultTypeInternal;
extern headerDefaultTypeInternal _header_default_instance_;
class txn_time_info;
struct txn_time_infoDefaultTypeInternal;
extern txn_time_infoDefaultTypeInternal _txn_time_info_default_instance_;
}  // namespace xtlm_ipc
PROTOBUF_NAMESPACE_OPEN
template<> ::xtlm_ipc::control_register* Arena::CreateMaybeMessage<::xtlm_ipc::control_register>(Arena*);
template<> ::xtlm_ipc::header* Arena::CreateMaybeMessage<::xtlm_ipc::header>(Arena*);
template<> ::xtlm_ipc::txn_time_info* Arena::CreateMaybeMessage<::xtlm_ipc::txn_time_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xtlm_ipc {

enum header_message_type : int {
  header_message_type_AXI_TXN = 0,
  header_message_type_CONTROL_PACKET = 1
};
bool header_message_type_IsValid(int value);
constexpr header_message_type header_message_type_message_type_MIN = header_message_type_AXI_TXN;
constexpr header_message_type header_message_type_message_type_MAX = header_message_type_CONTROL_PACKET;
constexpr int header_message_type_message_type_ARRAYSIZE = header_message_type_message_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* header_message_type_descriptor();
template<typename T>
inline const std::string& header_message_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, header_message_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function header_message_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    header_message_type_descriptor(), enum_t_value);
}
inline bool header_message_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, header_message_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<header_message_type>(
    header_message_type_descriptor(), name, value);
}
enum control_register_command_type : int {
  control_register_command_type_READ = 0,
  control_register_command_type_WRITE = 1
};
bool control_register_command_type_IsValid(int value);
constexpr control_register_command_type control_register_command_type_command_type_MIN = control_register_command_type_READ;
constexpr control_register_command_type control_register_command_type_command_type_MAX = control_register_command_type_WRITE;
constexpr int control_register_command_type_command_type_ARRAYSIZE = control_register_command_type_command_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* control_register_command_type_descriptor();
template<typename T>
inline const std::string& control_register_command_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, control_register_command_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function control_register_command_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    control_register_command_type_descriptor(), enum_t_value);
}
inline bool control_register_command_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, control_register_command_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<control_register_command_type>(
    control_register_command_type_descriptor(), name, value);
}
// ===================================================================

class header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xtlm_ipc.header) */ {
 public:
  inline header() : header(nullptr) {}
  ~header() override;
  explicit PROTOBUF_CONSTEXPR header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  header(const header& from);
  header(header&& from) noexcept
    : header() {
    *this = ::std::move(from);
  }

  inline header& operator=(const header& from) {
    CopyFrom(from);
    return *this;
  }
  inline header& operator=(header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const header& default_instance() {
    return *internal_default_instance();
  }
  static inline const header* internal_default_instance() {
    return reinterpret_cast<const header*>(
               &_header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(header& a, header& b) {
    a.Swap(&b);
  }
  inline void Swap(header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const header& from) {
    header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xtlm_ipc.header";
  }
  protected:
  explicit header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef header_message_type message_type;
  static constexpr message_type AXI_TXN =
    header_message_type_AXI_TXN;
  static constexpr message_type CONTROL_PACKET =
    header_message_type_CONTROL_PACKET;
  static inline bool message_type_IsValid(int value) {
    return header_message_type_IsValid(value);
  }
  static constexpr message_type message_type_MIN =
    header_message_type_message_type_MIN;
  static constexpr message_type message_type_MAX =
    header_message_type_message_type_MAX;
  static constexpr int message_type_ARRAYSIZE =
    header_message_type_message_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  message_type_descriptor() {
    return header_message_type_descriptor();
  }
  template<typename T>
  static inline const std::string& message_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, message_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function message_type_Name.");
    return header_message_type_Name(enum_t_value);
  }
  static inline bool message_type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      message_type* value) {
    return header_message_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgTypeFieldNumber = 1,
    kMsgLengthFieldNumber = 2,
  };
  // required .xtlm_ipc.header.message_type msg_type = 1 [default = AXI_TXN];
  bool has_msg_type() const;
  private:
  bool _internal_has_msg_type() const;
  public:
  void clear_msg_type();
  ::xtlm_ipc::header_message_type msg_type() const;
  void set_msg_type(::xtlm_ipc::header_message_type value);
  private:
  ::xtlm_ipc::header_message_type _internal_msg_type() const;
  void _internal_set_msg_type(::xtlm_ipc::header_message_type value);
  public:

  // required fixed32 msg_length = 2 [default = 0];
  bool has_msg_length() const;
  private:
  bool _internal_has_msg_length() const;
  public:
  void clear_msg_length();
  uint32_t msg_length() const;
  void set_msg_length(uint32_t value);
  private:
  uint32_t _internal_msg_length() const;
  void _internal_set_msg_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:xtlm_ipc.header)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int msg_type_;
    uint32_t msg_length_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xtlm_5fipc_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class control_register final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xtlm_ipc.control_register) */ {
 public:
  inline control_register() : control_register(nullptr) {}
  ~control_register() override;
  explicit PROTOBUF_CONSTEXPR control_register(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  control_register(const control_register& from);
  control_register(control_register&& from) noexcept
    : control_register() {
    *this = ::std::move(from);
  }

  inline control_register& operator=(const control_register& from) {
    CopyFrom(from);
    return *this;
  }
  inline control_register& operator=(control_register&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const control_register& default_instance() {
    return *internal_default_instance();
  }
  static inline const control_register* internal_default_instance() {
    return reinterpret_cast<const control_register*>(
               &_control_register_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(control_register& a, control_register& b) {
    a.Swap(&b);
  }
  inline void Swap(control_register* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(control_register* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  control_register* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<control_register>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const control_register& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const control_register& from) {
    control_register::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(control_register* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xtlm_ipc.control_register";
  }
  protected:
  explicit control_register(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef control_register_command_type command_type;
  static constexpr command_type READ =
    control_register_command_type_READ;
  static constexpr command_type WRITE =
    control_register_command_type_WRITE;
  static inline bool command_type_IsValid(int value) {
    return control_register_command_type_IsValid(value);
  }
  static constexpr command_type command_type_MIN =
    control_register_command_type_command_type_MIN;
  static constexpr command_type command_type_MAX =
    control_register_command_type_command_type_MAX;
  static constexpr int command_type_ARRAYSIZE =
    control_register_command_type_command_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  command_type_descriptor() {
    return control_register_command_type_descriptor();
  }
  template<typename T>
  static inline const std::string& command_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, command_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function command_type_Name.");
    return control_register_command_type_Name(enum_t_value);
  }
  static inline bool command_type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      command_type* value) {
    return control_register_command_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRdWrCmdFieldNumber = 1,
    kAddressFieldNumber = 2,
    kCntrlRegFieldNumber = 3,
  };
  // required .xtlm_ipc.control_register.command_type rd_wr_cmd = 1 [default = READ];
  bool has_rd_wr_cmd() const;
  private:
  bool _internal_has_rd_wr_cmd() const;
  public:
  void clear_rd_wr_cmd();
  ::xtlm_ipc::control_register_command_type rd_wr_cmd() const;
  void set_rd_wr_cmd(::xtlm_ipc::control_register_command_type value);
  private:
  ::xtlm_ipc::control_register_command_type _internal_rd_wr_cmd() const;
  void _internal_set_rd_wr_cmd(::xtlm_ipc::control_register_command_type value);
  public:

  // required int32 address = 2 [default = 0];
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  int32_t address() const;
  void set_address(int32_t value);
  private:
  int32_t _internal_address() const;
  void _internal_set_address(int32_t value);
  public:

  // optional fixed64 cntrl_reg = 3;
  bool has_cntrl_reg() const;
  private:
  bool _internal_has_cntrl_reg() const;
  public:
  void clear_cntrl_reg();
  uint64_t cntrl_reg() const;
  void set_cntrl_reg(uint64_t value);
  private:
  uint64_t _internal_cntrl_reg() const;
  void _internal_set_cntrl_reg(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:xtlm_ipc.control_register)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int rd_wr_cmd_;
    int32_t address_;
    uint64_t cntrl_reg_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xtlm_5fipc_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class txn_time_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xtlm_ipc.txn_time_info) */ {
 public:
  inline txn_time_info() : txn_time_info(nullptr) {}
  ~txn_time_info() override;
  explicit PROTOBUF_CONSTEXPR txn_time_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  txn_time_info(const txn_time_info& from);
  txn_time_info(txn_time_info&& from) noexcept
    : txn_time_info() {
    *this = ::std::move(from);
  }

  inline txn_time_info& operator=(const txn_time_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline txn_time_info& operator=(txn_time_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const txn_time_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const txn_time_info* internal_default_instance() {
    return reinterpret_cast<const txn_time_info*>(
               &_txn_time_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(txn_time_info& a, txn_time_info& b) {
    a.Swap(&b);
  }
  inline void Swap(txn_time_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(txn_time_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  txn_time_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<txn_time_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const txn_time_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const txn_time_info& from) {
    txn_time_info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(txn_time_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xtlm_ipc.txn_time_info";
  }
  protected:
  explicit txn_time_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartOfTxnFieldNumber = 1,
    kEndOfTxnFieldNumber = 2,
  };
  // optional double start_of_txn = 1;
  bool has_start_of_txn() const;
  private:
  bool _internal_has_start_of_txn() const;
  public:
  void clear_start_of_txn();
  double start_of_txn() const;
  void set_start_of_txn(double value);
  private:
  double _internal_start_of_txn() const;
  void _internal_set_start_of_txn(double value);
  public:

  // optional double end_of_txn = 2;
  bool has_end_of_txn() const;
  private:
  bool _internal_has_end_of_txn() const;
  public:
  void clear_end_of_txn();
  double end_of_txn() const;
  void set_end_of_txn(double value);
  private:
  double _internal_end_of_txn() const;
  void _internal_set_end_of_txn(double value);
  public:

  // @@protoc_insertion_point(class_scope:xtlm_ipc.txn_time_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double start_of_txn_;
    double end_of_txn_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xtlm_5fipc_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// header

// required .xtlm_ipc.header.message_type msg_type = 1 [default = AXI_TXN];
inline bool header::_internal_has_msg_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool header::has_msg_type() const {
  return _internal_has_msg_type();
}
inline void header::clear_msg_type() {
  _impl_.msg_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::xtlm_ipc::header_message_type header::_internal_msg_type() const {
  return static_cast< ::xtlm_ipc::header_message_type >(_impl_.msg_type_);
}
inline ::xtlm_ipc::header_message_type header::msg_type() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.header.msg_type)
  return _internal_msg_type();
}
inline void header::_internal_set_msg_type(::xtlm_ipc::header_message_type value) {
  assert(::xtlm_ipc::header_message_type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.msg_type_ = value;
}
inline void header::set_msg_type(::xtlm_ipc::header_message_type value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.header.msg_type)
}

// required fixed32 msg_length = 2 [default = 0];
inline bool header::_internal_has_msg_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool header::has_msg_length() const {
  return _internal_has_msg_length();
}
inline void header::clear_msg_length() {
  _impl_.msg_length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t header::_internal_msg_length() const {
  return _impl_.msg_length_;
}
inline uint32_t header::msg_length() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.header.msg_length)
  return _internal_msg_length();
}
inline void header::_internal_set_msg_length(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.msg_length_ = value;
}
inline void header::set_msg_length(uint32_t value) {
  _internal_set_msg_length(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.header.msg_length)
}

// -------------------------------------------------------------------

// control_register

// required .xtlm_ipc.control_register.command_type rd_wr_cmd = 1 [default = READ];
inline bool control_register::_internal_has_rd_wr_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool control_register::has_rd_wr_cmd() const {
  return _internal_has_rd_wr_cmd();
}
inline void control_register::clear_rd_wr_cmd() {
  _impl_.rd_wr_cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::xtlm_ipc::control_register_command_type control_register::_internal_rd_wr_cmd() const {
  return static_cast< ::xtlm_ipc::control_register_command_type >(_impl_.rd_wr_cmd_);
}
inline ::xtlm_ipc::control_register_command_type control_register::rd_wr_cmd() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.control_register.rd_wr_cmd)
  return _internal_rd_wr_cmd();
}
inline void control_register::_internal_set_rd_wr_cmd(::xtlm_ipc::control_register_command_type value) {
  assert(::xtlm_ipc::control_register_command_type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rd_wr_cmd_ = value;
}
inline void control_register::set_rd_wr_cmd(::xtlm_ipc::control_register_command_type value) {
  _internal_set_rd_wr_cmd(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.control_register.rd_wr_cmd)
}

// required int32 address = 2 [default = 0];
inline bool control_register::_internal_has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool control_register::has_address() const {
  return _internal_has_address();
}
inline void control_register::clear_address() {
  _impl_.address_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t control_register::_internal_address() const {
  return _impl_.address_;
}
inline int32_t control_register::address() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.control_register.address)
  return _internal_address();
}
inline void control_register::_internal_set_address(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.address_ = value;
}
inline void control_register::set_address(int32_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.control_register.address)
}

// optional fixed64 cntrl_reg = 3;
inline bool control_register::_internal_has_cntrl_reg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool control_register::has_cntrl_reg() const {
  return _internal_has_cntrl_reg();
}
inline void control_register::clear_cntrl_reg() {
  _impl_.cntrl_reg_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t control_register::_internal_cntrl_reg() const {
  return _impl_.cntrl_reg_;
}
inline uint64_t control_register::cntrl_reg() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.control_register.cntrl_reg)
  return _internal_cntrl_reg();
}
inline void control_register::_internal_set_cntrl_reg(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cntrl_reg_ = value;
}
inline void control_register::set_cntrl_reg(uint64_t value) {
  _internal_set_cntrl_reg(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.control_register.cntrl_reg)
}

// -------------------------------------------------------------------

// txn_time_info

// optional double start_of_txn = 1;
inline bool txn_time_info::_internal_has_start_of_txn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool txn_time_info::has_start_of_txn() const {
  return _internal_has_start_of_txn();
}
inline void txn_time_info::clear_start_of_txn() {
  _impl_.start_of_txn_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double txn_time_info::_internal_start_of_txn() const {
  return _impl_.start_of_txn_;
}
inline double txn_time_info::start_of_txn() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.txn_time_info.start_of_txn)
  return _internal_start_of_txn();
}
inline void txn_time_info::_internal_set_start_of_txn(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_of_txn_ = value;
}
inline void txn_time_info::set_start_of_txn(double value) {
  _internal_set_start_of_txn(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.txn_time_info.start_of_txn)
}

// optional double end_of_txn = 2;
inline bool txn_time_info::_internal_has_end_of_txn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool txn_time_info::has_end_of_txn() const {
  return _internal_has_end_of_txn();
}
inline void txn_time_info::clear_end_of_txn() {
  _impl_.end_of_txn_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double txn_time_info::_internal_end_of_txn() const {
  return _impl_.end_of_txn_;
}
inline double txn_time_info::end_of_txn() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.txn_time_info.end_of_txn)
  return _internal_end_of_txn();
}
inline void txn_time_info::_internal_set_end_of_txn(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.end_of_txn_ = value;
}
inline void txn_time_info::set_end_of_txn(double value) {
  _internal_set_end_of_txn(value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.txn_time_info.end_of_txn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xtlm_ipc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xtlm_ipc::header_message_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xtlm_ipc::header_message_type>() {
  return ::xtlm_ipc::header_message_type_descriptor();
}
template <> struct is_proto_enum< ::xtlm_ipc::control_register_command_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xtlm_ipc::control_register_command_type>() {
  return ::xtlm_ipc::control_register_command_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xtlm_5fipc_5fcommon_2eproto
